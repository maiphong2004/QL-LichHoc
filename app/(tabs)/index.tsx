import { ScrollView, StyleSheet, View } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
// Import useAppContext n·∫øu mu·ªën hi·ªÉn th·ªã d·ªØ li·ªáu th·∫≠t t·ª´ Context
// import { useAppContext } from '@/context/AppContext';

// Gi·∫£ ƒë·ªãnh b·∫°n c√≥ th·ªÉ l·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ ƒë√¢u ƒë√≥ (v√≠ d·ª•: state, context, storage)
const userName = "B·∫°n"; // Thay th·∫ø b·∫±ng t√™n th·ª±c t·∫ø n·∫øu c√≥

// D·ªØ li·ªáu m·∫´u (s·∫Ω thay th·∫ø b·∫±ng d·ªØ li·ªáu t·ª´ Context sau)
// L·∫•y nextClass v√† upcomingHomework t·ª´ Context v√† x·ª≠ l√Ω l·ªçc/s·∫Øp x·∫øp ƒë·ªÉ ch·ªâ l·∫•y c√°c m·ª•c s·∫Øp t·ªõi
const sampleNextClass = {
  subject: 'To√°n Cao c·∫•p A1',
  time: '10:00 AM - 11:30 AM',
  location: 'Ph√≤ng A205',
  day: 'Th·ª© Ba', // Ho·∫∑c ng√†y c·ª• th·ªÉ
};

const sampleUpcomingHomework = [
  { id: '1', description: 'Ho√†n th√†nh b√†i t·∫≠p ch∆∞∆°ng 3', subject: 'V·∫≠t l√Ω ƒê·∫°i c∆∞∆°ng', dueDate: '2025-05-28T10:00:00Z' }, // Th√™m timezone ƒë·ªÉ moment parse ƒë√∫ng
  { id: '2', description: 'L√†m b√°o c√°o nh√≥m', subject: 'Kinh t·∫ø Vi m√¥', dueDate: '2025-06-01T14:00:00Z' },
  { id: '3', description: '√în t·∫≠p gi·ªØa k·ª≥', subject: 'L·ªãch s·ª≠ ƒê·∫£ng', dueDate: '2025-05-25T08:00:00Z' },
  // ... th√™m c√°c b√†i t·∫≠p kh√°c
];

import moment from 'moment'; // Import moment ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y
import 'moment/locale/vi';
moment.locale('vi');

export default function HomeScreen() {
  // S·ª≠ d·ª•ng useAppContext ƒë·ªÉ l·∫•y d·ªØ li·ªáu l·ªãch v√† b√†i t·∫≠p
  // const { schedule, homework } = useAppContext();

  // TODO: X·ª≠ l√Ω logic ƒë·ªÉ t√¨m bu·ªïi h·ªçc ti·∫øp theo v√† c√°c b√†i t·∫≠p s·∫Øp t·ªõi t·ª´ d·ªØ li·ªáu th·∫≠t

  // Hi·ªán t·∫°i d√πng d·ªØ li·ªáu m·∫´u:
  const nextClass = sampleNextClass;
  const upcomingHomework = sampleUpcomingHomework;

  // H√†m helper ƒë·ªãnh d·∫°ng ng√†y cho b√†i t·∫≠p s·∫Øp t·ªõi (c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng t·ª´ HomeworkScreen)
  const formatHomeworkDueDate = (dateString: string) => {
    const date = moment(dateString);
    if (date.isSame(moment(), 'day')) {
      return 'H√¥m nay, ' + date.format('HH:mm');
    } else if (date.isSame(moment().add(1, 'day'), 'day')) {
      return 'Ng√†y mai, ' + date.format('HH:mm');
    } else {
      return date.format('HH:mm, DD/MM/YYYY');
    }
  };


  return (
    <ThemedView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        {/* Header L·ªùi ch√†o */}
        <View style={styles.headerContainer}>
          <ThemedText type="title" style={styles.headerTitle}>
            Ch√†o, {userName}!
          </ThemedText>
          <ThemedText type="subtitle" style={styles.headerSubtitle}>
            T·ªïng quan h·ªçc t·∫≠p c·ªßa b·∫°n
          </ThemedText>
        </View>

        {/* Khu v·ª±c L·ªãch h·ªçc s·∫Øp t·ªõi */}
        <ThemedView style={styles.sectionContainer}>
          <ThemedText type="subtitle" style={styles.sectionTitle}>
            Bu·ªïi h·ªçc ti·∫øp theo
          </ThemedText>
          {nextClass ? (
            <ThemedView style={styles.card}>
              <ThemedText type="defaultSemiBold">{nextClass.subject}</ThemedText>
              <ThemedText style={styles.cardText}>
                ‚è∞ {nextClass.time} ({nextClass.day})
              </ThemedText>
              <ThemedText style={styles.cardText}>
                üìç {nextClass.location}
              </ThemedText>
            </ThemedView>
          ) : (
            <ThemedText style={styles.emptyCardText}>
              Kh√¥ng c√≥ bu·ªïi h·ªçc n√†o s·∫Øp t·ªõi.
            </ThemedText>
          )}
        </ThemedView>

        {/* Khu v·ª±c B√†i t·∫≠p s·∫Øp t·ªõi */}
        <ThemedView style={styles.sectionContainer}>
          <ThemedText type="subtitle" style={styles.sectionTitle}>
            B√†i t·∫≠p s·∫Øp t·ªõi ({upcomingHomework.length})
          </ThemedText>
          {upcomingHomework.length > 0 ? (
            <ThemedView style={styles.homeworkListContainer}>
              {upcomingHomework.map(item => (
                <ThemedView key={item.id} style={styles.homeworkItem}>
                  <ThemedText type="defaultSemiBold" style={styles.homeworkItemTitle}>
                    {item.description}
                  </ThemedText>
                  <ThemedText style={styles.homeworkItemText}>
                    M√¥n: {item.subject}
                  </ThemedText>
                  <View style={styles.homeworkItemTextRow}>
                    <ThemedText style={styles.homeworkItemText}>H·∫°n ch√≥t: </ThemedText>
                    <ThemedText style={styles.homeworkItemDueDate}>{formatHomeworkDueDate(item.dueDate)}</ThemedText>
                  </View>
                </ThemedView>
              ))}
            </ThemedView>
          ) : (
            <>
              <ThemedText style={styles.emptyCardText}>
                Kh√¥ng c√≥ b√†i t·∫≠p n√†o s·∫Øp t·ªõi.
              </ThemedText>
              <ThemedText style={styles.emptyCardText}>
                Nh·∫•n n√∫t "+" ·ªü g√≥c tr√™n ƒë·ªÉ th√™m m·ªõi!
              </ThemedText>
            </>
          )}
        </ThemedView>

        {/* B·∫°n c√≥ th·ªÉ th√™m c√°c khu v·ª±c kh√°c nh∆∞ th√¥ng b√°o, th·ªëng k√™, v.v. */}

      </ScrollView>
    </ThemedView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollViewContent: {
    padding: 20,
    paddingBottom: 100,
  },
  headerContainer: {
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  headerSubtitle: {
    fontSize: 18,
    color: '#555',
  },
  sectionContainer: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingBottom: 8,
  },
  card: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 4,
  },
  cardText: {
    fontSize: 16,
    marginBottom: 4,
    color: '#333',
  },
  emptyCardText: {
    fontSize: 16,
    color: '#555',
    textAlign: 'center',
    paddingVertical: 20,
  },
  homeworkListContainer: {
    marginTop: 0,
  },
  homeworkItem: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.08,
    shadowRadius: 4,
    elevation: 3,
  },
  homeworkItemTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  homeworkItemText: {
    fontSize: 14,
    color: '#555',
    marginBottom: 4,
  },
  homeworkItemDueDate: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#e74c3c',
  },
  homeworkItemTextRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
  },
});