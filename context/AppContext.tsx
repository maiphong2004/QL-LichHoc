// context/AppContext.tsx
import React, {
     createContext,
     useState,
     useContext,
     useEffect,
     useCallback,
} from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import moment from 'moment'; // ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t moment
import 'moment/locale/vi'; // Import ti·∫øng Vi·ªát
moment.locale('vi');

// ƒê·∫∑t tr√¨nh x·ª≠ l√Ω th√¥ng b√°o ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o khi ·ª©ng d·ª•ng ƒëang ch·∫°y ·ªü foreground
Notifications.setNotificationHandler({
     handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
          shouldShowBanner: true, // TH√äM D√íNG N√ÄY
          shouldShowList: true,   // TH√äM D√íNG N√ÄY
     }),
});

export interface HomeworkItem {
     id: string;
     description: string;
     subject: string;
     dueDate: string; // ISO string for date and time (e.g., "2025-05-28T10:00:00Z")
     status: 'pending' | 'completed';
     notes?: string;
     notificationId?: string; // Th√™m tr∆∞·ªùng n√†y ƒë·ªÉ l∆∞u ID th√¥ng b√°o
}

export interface ScheduleEvent {
     id: string;
     title: string;
     subject: string;
     startTime: string; // HH:mm
     endTime: string; // HH:mm
     daysOfWeek: ('Mon' | 'Tue' | 'Wed' | 'Thu' | 'Fri' | 'Sat' | 'Sun')[];
     location?: string;
     notes?: string;
}

interface AppContextType {
     homeworks: HomeworkItem[];
     schedules: ScheduleEvent[];
     addHomework: (homework: Omit<HomeworkItem, 'id'>) => Promise<void>;
     updateHomework: (homework: HomeworkItem) => Promise<void>;
     deleteHomework: (id: string) => Promise<void>;
     addSchedule: (event: Omit<ScheduleEvent, 'id'>) => Promise<void>;
     updateSchedule: (event: ScheduleEvent) => Promise<void>;
     deleteSchedule: (id: string) => Promise<void>;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider: React.FC<{ children: React.ReactNode }> = ({
     children,
}) => {
     const [homeworks, setHomeworks] = useState<HomeworkItem[]>([]);
     const [schedules, setSchedules] = useState<ScheduleEvent[]>([]);

     // H√†m y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
     const requestNotificationPermissions = useCallback(async () => {
          const { status: existingStatus } =
               await Notifications.getPermissionsAsync();
          let finalStatus = existingStatus;
          if (existingStatus !== 'granted') {
               const { status } = await Notifications.requestPermissionsAsync();
               finalStatus = status;
          }
          if (finalStatus !== 'granted') {
               console.log('Failed to get push token for push notification!');
               return false;
          }
          // C√†i ƒë·∫∑t k√™nh th√¥ng b√°o cho Android (quan tr·ªçng cho Android 8.0 tr·ªü l√™n)
          if (Platform.OS === 'android') {
               await Notifications.setNotificationChannelAsync('homework_reminders', {
                    name: 'Nh·∫Øc nh·ªü b√†i t·∫≠p',
                    importance: Notifications.AndroidImportance.HIGH,
                    vibrationPattern: [0, 250, 250, 250],
                    lightColor: '#FF231F7C',
                    sound: 'default', // C√≥ th·ªÉ t√πy ch·ªânh √¢m thanh th√¥ng b√°o
               });
          }
          return true;
     }, []);

     useEffect(() => {
          requestNotificationPermissions();
          const loadData = async () => {
               try {
                    const storedHomeworks = await AsyncStorage.getItem('homeworks');
                    const storedSchedules = await AsyncStorage.getItem('schedules');
                    if (storedHomeworks) {
                         setHomeworks(JSON.parse(storedHomeworks));
                    }
                    if (storedSchedules) {
                         setSchedules(JSON.parse(storedSchedules));
                    }
               } catch (error) {
                    console.error('Failed to load data from AsyncStorage', error);
               }
          };
          loadData();
     }, [requestNotificationPermissions]); // Th√™m requestNotificationPermissions v√†o dependency array

     useEffect(() => {
          const saveData = async () => {
               try {
                    await AsyncStorage.setItem('homeworks', JSON.stringify(homeworks));
                    await AsyncStorage.setItem('schedules', JSON.stringify(schedules));
               } catch (error) {
                    console.error('Failed to save data to AsyncStorage', error);
               }
          };
          saveData();
     }, [homeworks, schedules]);

     // H√†m l·∫≠p l·ªãch th√¥ng b√°o
     const scheduleHomeworkNotification = async (
          homework: HomeworkItem,
     ): Promise<string | undefined> => {
          const hasPermission = await requestNotificationPermissions();
          if (!hasPermission) {
               console.log('Kh√¥ng c√≥ quy·ªÅn g·ª≠i th√¥ng b√°o.');
               return;
          }

          const dueDateMoment = moment(homework.dueDate);
          const notificationTime = moment(dueDateMoment).subtract(5, 'minutes');

          // Kh√¥ng l·∫≠p l·ªãch n·∫øu th·ªùi gian th√¥ng b√°o ƒë√£ qua
          if (notificationTime.isBefore(moment())) {
               console.log('Th·ªùi gian th√¥ng b√°o ƒë√£ qua, kh√¥ng th·ªÉ l·∫≠p l·ªãch.');
               return;
          }

          try {
               const id = await Notifications.scheduleNotificationAsync({
                    content: {
                         title: 'S·∫Øp h·∫øt h·∫°n b√†i t·∫≠p! üìö',
                         body: `${homework.description} m√¥n ${homework.subject} s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
                         data: { type: 'homework', homeworkId: homework.id }, // D·ªØ li·ªáu b·ªï sung
                    },
                    trigger: {
                         date: notificationTime.toDate(),
                         channelId: 'homework_reminders', // S·ª≠ d·ª•ng k√™nh ƒë√£ ƒë·ªãnh nghƒ©a cho Android
                    },
               });
               console.log(
                    `Th√¥ng b√°o b√†i t·∫≠p "${homework.description}" (ID: ${homework.id}) ƒë√£ ƒë∆∞·ª£c l·∫≠p l·ªãch v·ªõi Notification ID: ${id}`,
               );
               return id;
          } catch (error) {
               console.error('L·ªói khi l·∫≠p l·ªãch th√¥ng b√°o:', error);
               return undefined;
          }
     };

     // H√†m h·ªßy th√¥ng b√°o
     const cancelHomeworkNotification = async (notificationId?: string) => {
          if (notificationId) {
               try {
                    await Notifications.cancelScheduledNotificationAsync(notificationId);
                    console.log(`Th√¥ng b√°o v·ªõi Notification ID ${notificationId} ƒë√£ b·ªã h·ªßy.`);
               } catch (error) {
                    console.error('L·ªói khi h·ªßy th√¥ng b√°o:', error);
               }
          }
     };

     const addHomework = async (newHomework: Omit<HomeworkItem, 'id'>) => {
          const id = Date.now().toString(); // T·∫°o ID duy nh·∫•t
          const homeworkWithId: HomeworkItem = {
               ...newHomework,
               id,
               status: 'pending',
          };

          // L·∫≠p l·ªãch th√¥ng b√°o v√† l∆∞u notificationId
          const notificationId = await scheduleHomeworkNotification(homeworkWithId);
          if (notificationId) {
               homeworkWithId.notificationId = notificationId;
          }

          setHomeworks((prev) => [...prev, homeworkWithId]);
     };

     const updateHomework = async (updatedHomework: HomeworkItem) => {
          // 1. H·ªßy th√¥ng b√°o c≈© n·∫øu c√≥
          if (updatedHomework.notificationId) {
               await cancelHomeworkNotification(updatedHomework.notificationId);
          }

          // 2. L·∫≠p l·ªãch th√¥ng b√°o m·ªõi n·∫øu b√†i t·∫≠p ch∆∞a ho√†n th√†nh V√Ä h·∫°n ch√≥t c√≤n trong t∆∞∆°ng lai (√≠t nh·∫•t 5 ph√∫t)
          let newNotificationId: string | undefined = undefined;
          if (
               updatedHomework.status !== 'completed' && // Ch·ªâ th√¥ng b√°o n·∫øu ch∆∞a ho√†n th√†nh
               moment(updatedHomework.dueDate).isAfter(moment().add(5, 'minutes')) // V√† c√≤n √≠t nh·∫•t 5 ph√∫t
          ) {
               newNotificationId = await scheduleHomeworkNotification(updatedHomework);
          }

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p v·ªõi notificationId m·ªõi (ho·∫∑c undefined n·∫øu ƒë√£ h·ªßy)
          setHomeworks((prev) =>
               prev.map((hw) =>
                    hw.id === updatedHomework.id
                         ? { ...updatedHomework, notificationId: newNotificationId }
                         : hw,
               ),
          );
     };

     const deleteHomework = async (id: string) => {
          const homeworkToDelete = homeworks.find((hw) => hw.id === id);
          if (homeworkToDelete && homeworkToDelete.notificationId) {
               await cancelHomeworkNotification(homeworkToDelete.notificationId); // H·ªßy th√¥ng b√°o li√™n quan
          }
          setHomeworks((prev) => prev.filter((hw) => hw.id !== id));
     };

     const addSchedule = async (newEvent: Omit<ScheduleEvent, 'id'>) => {
          const id = Date.now().toString();
          setSchedules((prev) => [...prev, { ...newEvent, id }]);
     };

     const updateSchedule = async (updatedEvent: ScheduleEvent) => {
          setSchedules((prev) =>
               prev.map((event) =>
                    event.id === updatedEvent.id ? updatedEvent : event,
               ),
          );
     };

     const deleteSchedule = async (id: string) => {
          setSchedules((prev) => prev.filter((event) => event.id !== id));
     };

     return (
          <AppContext.Provider
               value={{
                    homeworks,
                    schedules,
                    addHomework,
                    updateHomework,
                    deleteHomework,
                    addSchedule,
                    updateSchedule,
                    deleteSchedule,
               }}
          >
               {children}
          </AppContext.Provider>
     );
};

export const useAppContext = () => {
     const context = useContext(AppContext);
     if (context === undefined) {
          throw new Error('useAppContext must be used within an AppProvider');
     }
     return context;
};